package problem_012;

import java.io.PrintStream;

//@Problem: Highly divisible triangular number
//The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
//
//1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
//
//Let us list the factors of the first seven triangle numbers:
//
//  1: 1
//  3: 1,3
//  6: 1,2,3,6
// 10: 1,2,5,10
// 15: 1,3,5,15
// 21: 1,3,7,21
// 28: 1,2,4,7,14,28
//
//We can see that 28 is the first triangle number to have over five divisors.
//
//What is the value of the first triangle number to have over five hundred divisors?

public class P_012 {

	public static final int LIMIT = 500;

	public P_012() {
		out = new PrintStream(System.out);
	}

	PrintStream out;

	void startT() {
		long startTime = System.currentTimeMillis();
		start();
		long endTime = System.currentTimeMillis();
		double runTime = (endTime-startTime);
		out.printf("%n%nRuntime of program is: %.2f sec.", runTime/1000);
	}
	
	void start() {
		
		double seq = 0;
		double iter = 1;
		
		while (count_factors(seq) < LIMIT){
			seq += iter;
			iter++;
		}
		out.printf("%.0f  ", seq);
	}
	
	double count_factors(double num){
		double count = 1;
		double sqrt = Math.sqrt(num);
		for (double i = 0; i <= sqrt; i++){
			if (num % i == 0){
				count+= 2;
			}
		}
//		out.printf("%f^2 = %f -- %f%n", sqrt, (sqrt*sqrt), num);
		if (sqrt*sqrt == num){
			count--;
		}
		return count;
	}

	public static void main(String[] args) {
		new P_012().startT(); 
	}

}
